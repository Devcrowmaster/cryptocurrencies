{"version":3,"sources":["cryptomonedas.png","hooks/useCurrency.js","hooks/useCryptocurrencies.js","components/Error.js","components/Form.js","components/Quotation.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useCurrency","initialState","options","useState","state","setState","htmlFor","name","id","onChange","e","target","value","map","option","key","code","useCryptocurrencies","cryptocurrency","CoinInfo","Id","Name","FullName","MessageError","p","Error","message","Button","input","Form","setCurrency","setCryptocurrency","crypto","setCrypto","error","setError","currency","SelectCurrency","SelectCrypto","useEffect","a","Axios","get","result","data","Data","consultAPI","onSubmit","preventDefault","type","ResultDiv","div","Paragraph","Price","Quotation","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Container","Image","img","Heading","h1","App","setResult","charge","setCharge","url","setTimeout","DISPLAY","quoteCrypto","component","src","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2b32d227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue',cursive;\r\n  color : #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  border-radius: 10px;\r\n  border:none;\r\n  /* -webkit-appearance: none; */\r\n  font-size: 1.2rem;\r\n  appearance: none;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst useCurrency = (label,initialState,options) =>{\r\n\r\n  //State del custom hook\r\n\r\n  const [state, setState] = useState(initialState);\r\n\r\n\r\n  //Lo que se mostrara en pantalla\r\n  const SelectOpt = ()=>(\r\n\r\n    <Fragment>\r\n\r\n      <Label htmlFor=\"currency\">{label}</Label>\r\n      <Select name=\"currency\" id=\"currency\" onChange={e => setState(e.target.value)} value={state} >\r\n        <option value=\"\">- Seleccione -</option>\r\n        {options.map(option =>(\r\n          <option key={option.code} value={option.code} >{option.name}</option>\r\n        ))}\r\n      </Select>\r\n\r\n    </Fragment>\r\n    \r\n  );\r\n\r\n  //Retornar state , interfaz y funcion que modifca el state\r\n\r\n  return [ state , SelectOpt , setState ]  //El orden es importante\r\n\r\n}\r\n\r\nexport default useCurrency;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue',cursive;\r\n  color : #fff;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 2.4rem;\r\n  display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  border-radius: 10px;\r\n  border:none;\r\n  /* -webkit-appearance: none; */\r\n  font-size: 1.2rem;\r\n  appearance: none;\r\n`;\r\n\r\nconst useCryptocurrencies = (label,initialState,cryptocurrency) =>{\r\n\r\n  // console.log(cryptocurrency);\r\n  //State del custom hook\r\n\r\n  const [state, setState] = useState(initialState);\r\n\r\n\r\n  //Lo que se mostrara en pantalla\r\n  const SelectCrypto = ()=>(\r\n\r\n    <Fragment>\r\n\r\n      <Label htmlFor=\"currency\">{label}</Label>\r\n      <Select name=\"currency\" id=\"currency\" onChange={e => setState(e.target.value)} value={state} >\r\n        <option value=\"\">- Seleccione -</option>\r\n        {cryptocurrency.map(option =>(\r\n          <option key={option.CoinInfo.Id} value={option.CoinInfo.Name} >{option.CoinInfo.FullName}</option>\r\n        ))}\r\n      </Select>\r\n\r\n    </Fragment>\r\n    \r\n  );\r\n\r\n  //Retornar state , interfaz y funcion que modifca el state\r\n\r\n  return [ state , SelectCrypto , setState ]  //El orden es importante\r\n\r\n}\r\n\r\nexport default useCryptocurrencies;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MessageError = styled.p`\r\n  background-color: #b7322c;\r\n  padding: 1rem;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 2rem;\r\n  font-family: 'Bebas Neue',cursive;\r\n`;\r\n\r\nconst Error = ({message}) => {\r\n  return ( \r\n    <MessageError>{message}</MessageError>\r\n   );\r\n}\r\n \r\nexport default Error;","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCryptocurrencies from '../hooks/useCryptocurrencies';\r\nimport Axios from 'axios';\r\nimport Error from './Error';\r\n\r\n\r\n\r\nconst Button = styled.input`\r\n  margin-top: 20px;\r\n  font-weight: bold;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2fe;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  transition: background-color .3s ease;\r\n\r\n  &:hover{\r\n    background-color: #326ac0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\n\r\nconst Form = ({setCurrency,setCryptocurrency}) => {\r\n\r\n  //State del listado de criptomonedas\r\n  const [crypto, setCrypto] = useState([]);\r\n\r\n  const [error, setError] = useState(false);\r\n\r\n  const CURRENCIES = [\r\n    {code: 'USD',name: 'Dolar de Estados Unidos'},\r\n    {code: 'MXN',name: 'Peso Mexicano'},\r\n    {code: 'EUR',name: 'Euro'},\r\n    {code: 'GBP',name: 'Libra Esterlina'}\r\n  ]\r\n\r\n  //Utilizar useCurrency\r\n  const [currency , SelectCurrency] = useCurrency('Elige tu Moneda','',CURRENCIES);\r\n\r\n  //Utilizar useCryptocurrencies\r\n\r\n  const [cryptocurrency, SelectCrypto] = useCryptocurrencies('Elige tu Criptomoneda','',crypto);\r\n\r\n  //Ejecutar llamado a la API\r\n  useEffect(()=>{\r\n    const consultAPI = async () =>{\r\n      const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n      const result = await Axios.get(url);\r\n\r\n      // console.log(result);\r\n      // console.log(result.data.Data);\r\n      setCrypto(result.data.Data);\r\n\r\n\r\n      \r\n    }\r\n    consultAPI();\r\n\r\n  },[]);\r\n\r\n  const handleSubmit = e =>{\r\n    e.preventDefault();\r\n\r\n\r\n    //validar si ambos campos estan llenos\r\n\r\n    if(currency === '' || cryptocurrency === ''){\r\n      setError(true);\r\n      return;\r\n    }\r\n    //Pasar los datos al componente principal\r\n    setError(false);\r\n\r\n    setCurrency(currency);\r\n    setCryptocurrency(cryptocurrency);\r\n  }\r\n\r\n  return ( \r\n    <form \r\n      onSubmit={handleSubmit}\r\n    >\r\n      { error ? <Error message=\"Todos los campos son obligatorios\"/> : null}\r\n      <SelectCurrency/>\r\n      <SelectCrypto/>\r\n      <Button\r\n        type=\"submit\"\r\n        value=\"Calcular\"\r\n      />\r\n\r\n    </form>\r\n  );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultDiv = styled.div`\r\n  color: #fff;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n`;\r\nconst Paragraph = styled.p`\r\n  font-size: 1.1rem;\r\n  span{\r\n    font-weight: bold;\r\n  }\r\n\r\n`;\r\nconst Price = styled.p`\r\n  font-size: 2rem;\r\n  span{\r\n    font-weight: bold;\r\n  }\r\n\r\n`;\r\n\r\nconst Quotation = ({result}) => {\r\n  if(Object.keys(result).length === 0) return null; //Si llega vacio no ejecuta nada\r\n\r\n  console.log(result);\r\n  return ( \r\n    <ResultDiv>\r\n      <Price>El precio es: <span>{result.PRICE}</span></Price>\r\n      <Paragraph>Precio mas alto del dia: <span>{result.HIGHDAY}</span></Paragraph>\r\n      <Paragraph>Precio mas bajo del dia: <span>{result.LOWDAY}</span></Paragraph>\r\n      <Paragraph>Variacion en las ultimas 24 horas: <span>{result.CHANGEPCT24HOUR}</span></Paragraph>\r\n      <Paragraph>Ultima Actualizacion: <span>{result.LASTUPDATE}</span></Paragraph>\r\n    </ResultDiv>\r\n  );\r\n}\r\n \r\nexport default Quotation;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\n\r\nconst Spinner = () => {\r\n  return ( \r\n    <div class=\"sk-chase\">\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n      <div class=\"sk-chase-dot\"></div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport image from './cryptomonedas.png';\nimport Form from './components/Form';\nimport Axios from 'axios';\nimport Quotation from './components/Quotation';\nimport Spinner from './components/Spinner';\n\n\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px){\n    display: grid;\n    grid-template-columns: repeat(2,1fr);\n    gap: 2rem;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue',cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 3.5rem;\n  margin-top: 5rem;\n  margin-bottom: 3.5rem;\n\n  &::after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n  }\n`;\n\nfunction App() {\n\n  const [currency, setCurrency] = useState(''); \n\n  const [cryptocurrency, setCryptocurrency] = useState('');\n  const [result, setResult] = useState({});\n\n  const [charge, setCharge] = useState(false);\n\n  useEffect(()=>{\n\n    const quoteCrypto = async () =>{\n      //Evitamos la ejecucion la primera vez\n      if(currency === '') return;\n  \n      //Consultar la API para obtener la cotizacion\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptocurrency}&tsyms=${currency}`;\n    \n      const result = await Axios.get(url);\n\n      //Mostrar spinner\n      setCharge(true);\n\n      //Ocultar el spinner y mostrar el resultado\n      setTimeout(()=>{\n\n        //cambiar el estado de cargando\n        setCharge(false);\n\n\n        // guardar cotizacion\n        setResult(result.data.DISPLAY[cryptocurrency][currency]);\n      },3000)\n    \n      // console.log(result);\n      // console.log(result.data.DISPLAY);\n      // console.log(result.data.DISPLAY[cryptocurrency][currency]);\n\n      // console.log('cotizando');\n    }\n    quoteCrypto();\n\n  },[currency,cryptocurrency]);\n\n  //Mostrar el spinner o resultado\n\n  const component = (charge) ? <Spinner /> :  <Quotation result={result} /> ;\n\n\n  return (\n    <Container>\n\n      <div>\n        <Image\n          src={image}\n          alt=\"image crypto\"\n        />\n      </div>\n\n      <div>\n        <Heading>Cotiza Criptomonedas al instante</Heading>\n\n\n        <Form\n          setCurrency={setCurrency}\n          setCryptocurrency={setCryptocurrency}\n        />\n       {component}\n\n      </div>\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}